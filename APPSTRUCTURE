# Application Structure

## Overview
The WOL-Manager application is a Flask-based web application designed to manage and send Wake-on-LAN (WoL) packets to networked devices. This document outlines the structure of the application, its components, and how they interact.

## Directory Structure
- `/app`: Main application package
  - `__init__.py`: Application factory and configuration
  - `auth.py`: Authentication related routes and functions
  - `models.py`: Database models
  - `config.py`: Configuration classes
  - `main.py`: Main routes
  - `wol.py`: Wake-on-LAN functionality
  - `host.py`: Host management
  - `admin.py`: Admin panel functionality
  - `/templates`: HTML templates
  - `/static`: Static files (CSS, JS, images)

## Components

### Database Models
The application uses SQLAlchemy ORM with models for:
- User: Stores user information and credentials
- Host: Stores host details including MAC addresses
- Role: Defines user roles (admin, user)
- Permission: Defines granular permissions for users

### Authentication System
- Flask-Login for session management
- Bcrypt for password hashing
- CSRF protection using Flask-WTF
- Role-based access control
- Permission-based authorization

### Wake-on-LAN System
- Custom implementation to send magic packets
- MAC address validation
- Network broadcast functionality

### Admin Interface
- User management
- Host visibility control
- Role assignment
- Permission management

## Security Measures

### Authentication Security
- Bcrypt password hashing
- Strong session protection
- CSRF token validation
- Session cookie security (HttpOnly, SameSite)
- Login attempt logging
- Secure password reset flow

### Dependency Management and Security
- Regular updates of Python dependencies through requirements.txt
- Security patches applied promptly to address known vulnerabilities
- Automated vulnerability scanning for package dependencies
- Version pinning to ensure compatibility and prevent unexpected changes
- Security updates prioritized over feature updates
- Separate development and production dependency management
- Documentation of security-related changes in CHANGELOG.md
- Periodic review of dependency licenses for compliance
- Containerized deployment to isolate the application environment
- Minimal dependency approach to reduce attack surface

### Data Security
- Input validation for all user inputs
- Parameterized queries to prevent SQL injection
- CSRF protection for all state-changing operations
- Role-based access to hosts and administrative functions
- Proper error handling to prevent information leakage

### Network Security
- Restricted access to Wake-on-LAN functionality based on user permissions
- Host visibility restricted by role assignment
- Secure defaults for network operations

## Configuration
- Environment-based configuration (development, testing, production)
- External configuration through environment variables
- Secure defaults with explicit overrides

# Application Architecture

## 1. Core Architecture Overview

### Factory Pattern Implementation
The application uses the factory pattern in `app/__init__.py` to create the Flask application instance:
- Creates a configurable application instance using `create_app()`
- Initializes extensions (SQLAlchemy, Login Manager, Migrate, etc.)
- Registers blueprints for modular organization
- Sets up error handlers and logging

### Blueprint Structure
The application is organized into several blueprints:
- **Auth Blueprint** (`app/auth.py`): Handles user authentication, registration, password management
- **Host Blueprint** (`app/host.py`): Manages network device information and operations
- **WOL Blueprint** (`app/wol.py`): Implements Wake-on-LAN functionality
- **Main Blueprint**: Manages main routes and application flow
- **Admin Blueprint**: Handles administrative functions and settings

### SQLAlchemy ORM Implementation
- Uses SQLAlchemy with scoped sessions for database operations
- Models defined in `app/models.py`
- Session management handled in the application factory
- Leverages Flask-Migrate for database migrations (managed via `manage.py`)
- Raw SQL queries implemented using SQLAlchemy text() function:
  - Imported via `from sqlalchemy import text`
  - All raw SQL statements wrapped with text() function: `db_session.execute(text("SELECT 1"))`
  - Prevents SQLAlchemy warnings and ensures proper SQL escaping
  - Used in database integrity checks and complex queries where ORM is insufficient

### Flask-Login Integration
- User authentication through Flask-Login extension
- User loader function defined in `app/__init__.py`
- Session management and authentication state tracking
- Login/logout functionality implemented in auth blueprint

### Role-Permission Hierarchy
- Many-to-many relationship between roles and permissions using association tables
- Users have roles which grant specific permissions
- Permission checking implemented for route access control
- Role-based visibility filtering for hosts

## 2. Core Components Analysis

### Model Relationships (ERD)
```
User (1) <-----> (M) Role (M) <-----> (M) Permission
  |
  | (1)
  v
 (M)
Host (1) <-----> (M) Log
```

#### Key Models:
- **User**: Authentication, profile data, role assignments
- **Role**: Named permission groups (Admin, User, etc.)
- **Permission**: Granular access controls
- **Host**: Network device information (MAC address, IP, name)
- **Log**: Record of WOL operations and system events
- **AdminSettings**: System-wide configuration options

### WOL Packet Generation
- Implemented in `app/wol.py`
- Creates magic packets with 6 bytes of 0xFF followed by 16 repetitions of target MAC address
- Sends packets via UDP to broadcast address on port 9
- Includes MAC address validation and formatting
- Implements rate limiting for security
### Authentication Flow
1. User submits credentials via login form
2. Credentials validated against database (password hashed with bcrypt)
3. Authentication attempt logged to database with timestamp, IP address, and user agent
4. User session created with Flask-Login if authentication successful
5. Role and permissions attached to session
6. Authentication result (success/failure) logged with detailed information
7. Redirected to appropriate page based on role/permissions
5. Redirected to appropriate page based on role/permissions

### Host Visibility Rules
- Hosts filtered based on user roles and permissions
- Admin users can see all hosts
- Regular users see only hosts they've created or have been granted access to
- Visibility controlled at database query level and through template conditions

### AdminSettings Configuration
- System-wide settings managed through AdminSettings model
- Only accessible to users with admin role
- Configuration changes logged for audit trail
- Settings affect application behavior (e.g., rate limits, log retention)

## 3. Implementation Deep Dive

### Configuration Class Hierarchy
```
BaseConfig
  ├── DevelopmentConfig
  ├── TestingConfig
  └── ProductionConfig
```
- Configuration inheritance pattern in `app/config.py`
- Environment variables used for sensitive configuration
- Different settings for development, testing, and production environments

### Migration Workflow
- Database migrations managed via Flask-Migrate
- Commands implemented in `manage.py`:
  - `db init`: Initialize migration repository
  - `db migrate`: Generate migration script
  - `db upgrade`: Apply migrations to database
  - `db downgrade`: Revert migrations
- Migration scripts stored in migrations directory

### Session Management
- **Redis Backend**: Uses Redis for centralized session storage
  - Ensures consistent session data across multiple worker processes
  - Improves scalability and reliability in multi-worker environments
  - Allows for distributed deployment with shared session state
  - Falls back to filesystem sessions when Redis is unavailable
- Flask-Login handles user authentication state
- Remember-me functionality implemented
- Session security features:
  - Secure cookies (HTTPS only in production)
  - HttpOnly flag to prevent JavaScript access
  - Enhanced cookie parameters for external deployments
  - Strengthened session validation mechanisms
  - Configurable session lifetime (currently 1 day)
- **Session Expiration Implementation**:
  - Absolute expiration time stored in session data as `expiry_timestamp`
  - Session validity checked on each request via `before_request` hook
  - Sliding expiration window implemented (resets with activity)
  - Idle timeout after 30 minutes of inactivity (configurable)
  - Forced re-authentication after absolute timeout (24 hours by default)
  - Redis key expiration set to match session lifetime plus grace period
- **Session Validation Process**:
  - Multi-factor validation using:
    1. Session cookie integrity and signature verification
    2. Session ID existence in Redis backend
    3. User-agent consistency check
    4. IP address validation (optional, configurable)
    5. Session timestamp validation against expiration policy
  - Invalid sessions automatically cleared and redirected to login
  - Session fixation prevention through session regeneration after login
- **Session Refresh Mechanism**:
  - Sessions refreshed at configurable intervals (default: 5 minutes)
  - New session ID generated while maintaining session data
  - Previous session marked for graceful expiration (allows multiple tabs)
  - Background Redis cleanup of expired sessions
  - Client-side session update via secure cookie refresh

### Security Measures
- **CSRF Protection**: Implemented in forms using Flask-WTF's CSRF protection
  - Consistent CSRF secret key shared across all worker processes
  - One-hour token validity period via WTF_CSRF_TIME_LIMIT
  - Dedicated error handler with user-friendly messages
  - Token generation using 24-byte cryptographically secure keys
- **Password Hashing**: Bcrypt used for secure password storage in `app/auth.py`
- **Rate Limiting**: Implemented for WOL routes to prevent abuse
- **Input Validation**: WTForms validation on all user inputs
- **Permission Checks**: Authorization checks before sensitive operations
- **Dependency Management**: Regular updates of package dependencies, prompt application of security patches, vulnerability scanning of dependencies, version pinning to ensure compatibility, prioritizing security updates over feature updates, and maintaining separate development and production dependency environments

### Docker Architecture
- **Multi-container Setup**:

### Logging Architecture

#### Centralized Logging Configuration
- Implemented in `app/logging_config.py`
- Provides a unified logging interface for the entire application
- Configurable through environment variables and admin interface

#### Logging Profiles
- Multiple pre-defined logging profiles (LOW, MEDIUM, HIGH, DEBUG)
- Each profile sets appropriate levels for different log handlers
- Profile selection available through admin interface without restart

#### Components
- **LoggingConfigManager**: Central class that manages logging configuration
- **SensitiveDataFilter**: Log filter to prevent sensitive data from appearing in logs
- **ContextualLogRecord**: Enhanced log records with request context information
- **get_logger()**: Factory function to retrieve properly configured loggers

#### Log Handlers
- **Console Handler**: Outputs to stdout/stderr with appropriate formatting
- **File Handlers**: Multiple specialized handlers for different log types:
  - `app.log`: General application logs
  - `error.log`: Error-specific logs with full tracebacks
  - `access.log`: HTTP request logs
  - `security.log`: Authentication and security events
- **Rotation Handling**: Automatic log rotation based on size and retention policy

#### Integration Points
- **Flask Application**: Integrated at application factory in `__init__.py`
- **Request Handling**: Request context added through Flask before/after request hooks
- **Error Handling**: Exception logging integrated with Flask error handlers
- **Authentication**: Security events logged through auth blueprint

- **Multi-stage Build**: Optimized Docker image size via multi-stage build
- **Volume Persistence**:
  - Database stored in a persistent volume
  - Logs and user-generated content persisted across container restarts
  - Redis data optionally persisted for session continuity
- **Entrypoint Initialization**:
  - `entrypoint.sh` handles database initialization and migration
  - Waits for database to be available before starting the application
  - Creates initial admin user if it doesn't exist
  - Database initialization workflow:
    * Checks if database file exists at `/app/instance/wol.db`
    * If not present, executes initialization sequence: 
      1. `python manage.py init-db` - Creates database schema
      2. `python manage.py create-permissions` - Sets up default permissions
      3. `python manage.py create-admin` - Creates admin user (WOLadmin/Manager)
    * For existing databases, runs migrations via `python manage.py db-upgrade`
    * Uses persistent Docker volume (`db_data:/app/instance`) to maintain database across restarts
- **Environment Configuration**: Environment variables used for configuration
  - REDIS_URL for session storage connection
  - WTF_CSRF_SECRET_KEY for consistent CSRF token generation
  - Separate configuration for development, testing, and production environments
- **Network Configuration**:
  - **Host Network Mode**: Required for Wake-on-LAN functionality
    * Uses `network_mode: "host"` in docker-compose.yml for the web service
    * Provides direct access to UDP port 9 used by WoL magic packets
    * Allows broadcasting packets to the physical network (255.255.255.255)
    * Bypasses Docker's NAT which would otherwise block broadcast packets
  - **Default Bridge Network Limitations**:
    * Standard bridge mode isolates containers from the host network
    * Broadcast packets (255.255.255.255) cannot reach physical network devices
    * Even with exposed UDP port 9, NAT interferes with broadcast packet distribution
  - **Redis Configuration**:
    * Redis remains in bridge network mode with exposed port
    * Web service connects to Redis via localhost when in host network mode

## 4. Data Flow Documentation

### WOL Request Processing Sequence
```
1. User Request -> 2. Authentication Check -> 3. Permission Verification ->
4. Host Validation -> 5. Packet Generation -> 6. Network Transmission -> 7. Logging
```

### Role Resolution Algorithm
1. User's roles retrieved from database
2. Roles mapped to corresponding permissions
3. Permission sets merged to create comprehensive permission list
4. User's effective permissions cached in session
5. Permission checks performed against this cache

### Host Filtering Process
1. User roles determined at login
2. Database queries include role-based filters
3. Query results filtered based on user's permissions
4. Templates render only authorized content
5. Additional checks performed before sensitive operations

### Log Storage and Retrieval
1. Operations logged to database with timestamp, user, and action details
2. Logs retrievable by admins for audit purposes
3. Log retention policy applied based on configuration
4. Log entries associated with relevant model objects (User, Host)


## 5. Key Implementation Files

- `app/__init__.py`: Application factory and extension initialization
- `app/models.py`: Database models and relationships
- `app/log_handler.py`: Custom logging handlers and configurations
- `app/auth.py`: Authentication blueprint and logic
- `app/host.py`: Host management operations
- `app/wol.py`: Wake-on-LAN implementation
- `app/config.py`: Configuration classes
- `app/forms.py`: Form definitions with validation
- `app/logging_config.py`: Centralized logging configuration and profiles
- `manage.py`: CLI commands for application management
- `wsgi.py`: WSGI entry point
- `Dockerfile`: Container build instructions
- `docker-compose.yml`: Multi-container definition
- `entrypoint.sh`: Container initialization script

## 6. Development Workflow
### Local Development
1. Clone repository
2. Set up virtual environment
3. Install dependencies
4. Configure environment variables
5. Initialize database
6. Run development server

### Development Best Practices
1. **Version Control**: All changes should be tracked in version control
2. **Code Reviews**: All changes should undergo peer review before being merged
3. **Testing**: Write unit and integration tests for new features
4. **Documentation**: Update documentation when adding or changing features
5. **Consistent Logging**: Use the logging system appropriately (see Logging Architecture)

### Docker Development Workflow
1. **Source Code Changes Only**: Always make changes to the source code, never to a running Docker container
2. **Rebuild Containers**: After making code changes, build a new Docker image:
   ```
   docker build -t wol-manager:latest .
   ```
3. **Clean Test Environment**: Run containers from the new image:
   ```
   docker compose up -d
   ```
4. **Reproducible Development**: This approach ensures changes are tracked, versioned, and reproducible
5. **Container Immutability**: Preserves the immutable nature of containers as designed
6. **Test and Validate**: Test your changes in the newly built container
7. **Iterate**: Repeat the process as necessary during development

### Deployment Process
1. Build Docker image
2. Configure environment variables
3. Start containers using Docker Compose
4. Access application via web browser
5. Monitor logs for issues

### Update Process
1. Pull latest code changes
2. Build new Docker image
3. Run database migrations
4. Restart containers
5. Verify successful update

## 7. Extension Points and Customizations

The application architecture supports the following extension points:

- **New Blueprints**: Additional functionality can be added via new blueprints
- **Model Extensions**: Database models can be extended with new fields or relationships
- **Custom Permissions**: New permissions can be defined and assigned to roles
- **UI Customization**: Templates and static assets can be customized
- **API Integration**: Additional API endpoints can be added for external integration

